function MediaStreamRecorder(e,o){function i(){if("active"in e){if(!e.active)return!1}else if("ended"in e&&e.ended)return!1;return!0}var a=this;if(o=o||{mimeType:"video/webm"},"audio"===o.type){if(e.getVideoTracks().length&&e.getAudioTracks().length){var t;navigator.mozGetUserMedia?(t=new MediaStream,t.addTrack(e.getAudioTracks()[0])):t=new MediaStream(e.getAudioTracks()),e=t}o.mimeType&&-1!==o.mimeType.indexOf("audio")||(o.mimeType=isChrome?"audio/webm":"audio/ogg")}this.record=function(){a.blob=null;var i=o;o.disableLogs||console.log("Passing following config over MediaRecorder API.",i),r&&(r=null),isChrome&&!isMediaRecorderCompatible()&&(i="video/vp8"),r=new MediaRecorder(e,i),"canRecordMimeType"in r&&r.canRecordMimeType(o.mimeType)===!1&&(o.disableLogs||console.warn("MediaRecorder API seems unable to record mimeType:",o.mimeType)),r.ignoreMutedMedia=o.ignoreMutedMedia||!1,r.ondataavailable=function(e){a.dontFireOnDataAvailableEvent||!e.data||!e.data.size||e.data.size<100||a.blob||(a.blob=o.getNativeBlob?e.data:new Blob([e.data],{type:o.mimeType||"video/webm"}),a.recordingCallback&&(a.recordingCallback(a.blob),a.recordingCallback=null))},r.onerror=function(e){o.disableLogs||("InvalidState"===e.name?console.error("The MediaRecorder is not in a state in which the proposed operation is allowed to be executed."):"OutOfMemory"===e.name?console.error("The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute."):"IllegalStreamModification"===e.name?console.error("A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute."):"OtherRecordingError"===e.name?console.error("Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute."):"GenericError"===e.name?console.error("The UA cannot provide the codec or recording option that has been requested.",e):console.error("MediaRecorder Error",e)),"inactive"!==r.state&&"stopped"!==r.state&&r.stop()},r.start(36e5),o.onAudioProcessStarted&&o.onAudioProcessStarted(),o.initCallback&&o.initCallback()},this.stop=function(e){r&&(this.recordingCallback=e||function(){},"recording"===r.state&&(r.requestData(),r.stop()))},this.pause=function(){r&&"recording"===r.state&&r.pause()},this.resume=function(){if(this.dontFireOnDataAvailableEvent){this.dontFireOnDataAvailableEvent=!1;var e=o.disableLogs;return o.disableLogs=!0,this.record(),void(o.disableLogs=e)}r&&"paused"===r.state&&r.resume()},this.clearRecordedData=function(){r&&(this.pause(),this.dontFireOnDataAvailableEvent=!0,this.stop())};var r,a=this;!function n(){return r?i()===!1?(o.disableLogs||console.log("MediaStream seems stopped."),void a.stop()):void setTimeout(n,1e3):void 0}()}"undefined"!=typeof RecordRTC&&(RecordRTC.MediaStreamRecorder=MediaStreamRecorder);